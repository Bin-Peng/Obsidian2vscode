/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => Switch2VSCodePlugin
});
var import_obsidian = __toModule(require("obsidian"));
var import_child_process = __toModule(require("child_process"));
var import_os = __toModule(require("os"));
var DEFAULT_SETTINGS = {
  vscodeExecutablePath: (0, import_os.platform)() === "win32" ? "code.cmd" : "code",
  openInNewWindow: false
};
var Switch2VSCodePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-in-vscode",
      name: "\u5728VSCode\u4E2D\u6253\u5F00\u5F53\u524D\u6587\u4EF6",
      callback: () => this.openInVSCode()
    });
    this.addSettingTab(new Switch2VSCodeSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openInVSCode() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u6587\u4EF6");
      return;
    }
    const adapter = this.app.vault.adapter;
    if (!(adapter instanceof import_obsidian.FileSystemAdapter)) {
      new import_obsidian.Notice("\u65E0\u6CD5\u83B7\u53D6 Vault \u8DEF\u5F84");
      console.error("Adapter \u4E0D\u662F FileSystemAdapter");
      return;
    }
    const vaultPath = adapter.getBasePath();
    const filePath = activeFile.path;
    const absolutePath = `${vaultPath}/${filePath}`.replace(/"/g, '\\"').replace(/ /g, "\\ ");
    let command;
    if ((0, import_os.platform)() === "win32") {
      command = `"${this.settings.vscodeExecutablePath}" ${this.settings.openInNewWindow ? "--new-window" : ""} "${absolutePath}"`;
    } else {
      command = this.settings.vscodeExecutablePath === "code" ? `code ${this.settings.openInNewWindow ? "-n" : ""} "${absolutePath}"` : `open -a "${this.settings.vscodeExecutablePath}" ${this.settings.openInNewWindow ? "-n" : ""} "${absolutePath}"`;
    }
    (0, import_child_process.exec)(command, (error) => {
      if (error) {
        new import_obsidian.Notice("\u65E0\u6CD5\u6253\u5F00 VSCode\uFF0C\u8BF7\u68C0\u67E5\u8BBE\u7F6E");
        console.error("\u6253\u5F00 VSCode \u5931\u8D25:", error);
      } else {
        new import_obsidian.Notice("\u5DF2\u5728 VSCode \u4E2D\u6253\u5F00\u6587\u4EF6");
      }
    });
  }
};
var Switch2VSCodeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("VSCode \u53EF\u6267\u884C\u6587\u4EF6\u8DEF\u5F84").setDesc("\u8F93\u5165 VSCode \u53EF\u6267\u884C\u6587\u4EF6\u7684\u8DEF\u5F84\u6216\u547D\u4EE4\uFF08Windows \u9ED8\u8BA4: code.cmd; macOS/Linux \u9ED8\u8BA4: code\uFF09").addText((text) => text.setPlaceholder("\u4F8B\u5982: code \u6216 /Applications/Visual Studio Code.app").setValue(this.plugin.settings.vscodeExecutablePath).onChange(async (value) => {
      this.plugin.settings.vscodeExecutablePath = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5728\u65B0\u7A97\u53E3\u4E2D\u6253\u5F00").setDesc("\u542F\u7528\u540E\uFF0C\u6587\u4EF6\u5C06\u5728\u65B0\u7684 VSCode \u7A97\u53E3\u4E2D\u6253\u5F00").addToggle((toggle) => toggle.setValue(this.plugin.settings.openInNewWindow).onChange(async (value) => {
      this.plugin.settings.openInNewWindow = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
